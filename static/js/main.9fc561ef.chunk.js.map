{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","className","to","path","Home","Calendar","Charts","Themes","Settings","Circle","score","useState","value","grade","setGrade","circleDashArray","setCircleDashArray","color","setColor","clicked","percentage","Math","PI","radius","useEffect","name","onClick","viewBox","d","fill","strokeDasharray","id","style","Circles","circles_list","day","Date","shortName","map","theme","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0PASe,SAASA,IACtB,OACE,mCACE,cAAC,IAAD,UACE,gCACE,sBAAKC,UAAU,YAAf,UAEE,8BACE,cAAC,IAAD,CAAMC,GAAG,YAAT,SACE,mBAAGD,UAAU,wBAGjB,8BACE,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,mBAAGD,UAAU,yBAGjB,8BACE,cAAC,IAAD,CAAMC,GAAG,IAAT,SAEE,mBAAGD,UAAU,oBAGjB,8BACE,cAAC,IAAD,CAAMC,GAAG,UAAT,SACE,mBAAGD,UAAU,mBAGjB,8BACE,cAAC,IAAD,CAAMC,GAAG,YAAT,SACE,mBAAGD,UAAU,4BASnB,eAAC,IAAD,WACE,cAAC,IAAD,CAAOE,KAAK,YAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,UAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,YAAZ,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAK,IAAZ,SACE,cAAC,EAAD,gBAkBd,IAAMC,EAAO,WACX,OACE,qCACE,sCACA,cAAC,EAAD,QAKAC,EAAW,WACf,OACE,mCACE,6CAMAC,EAAS,WACb,OACE,mCACE,0CAMAC,EAAS,WACb,OACE,mCACE,2CAMAC,EAAW,WACf,OACE,mCACE,6CAUAC,EAA+B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAIxBC,mBAASD,EAAME,OAJS,mBAI3CC,EAJ2C,KAIpCC,EAJoC,OAKJH,mBAAS,WALL,mBAK3CI,EAL2C,KAK1BC,EAL0B,OAMxBL,mBAAS,iBANe,mBAM3CM,EAN2C,KAMpCC,EANoC,KAO5CC,EAAU,WAEdL,GAAUD,EAAQ,GAAK,GACvB,IAAMO,EAAaP,EAAQ,EAC3BK,EAAS,iBACU,IAAfE,GACFF,EAAS,eAGXF,EAAmB,GAAD,OAAII,GAAc,EAAaC,KAAKC,IAApC,aAA4CC,EAAaF,KAAKC,MAOlF,OAJAE,qBAAU,WACRL,MAEC,IAED,sBAAKlB,UAAW,kBAAoBS,EAAMe,KAA1C,UACE,4BAAIf,EAAMe,OAEV,qBAAKxB,UAAW,gBAAkBS,EAAMe,KAAMC,QAASP,EAAvD,SACE,sBAAKQ,QAAQ,YAAb,UACE,sBAAM1B,UAAU,UAAU2B,EAAE,kDAAkDC,KAAK,OAAOC,gBAAgB,aAC1G,sBAAM7B,UAAU,iBAAiB8B,GAAI,IAAKH,EAAE,kDAAkDC,KAAK,OAAOC,gBAAiBf,EAAiBiB,MAAO,CAAE,OAAS,GAAT,OAAaf,eAQtKgB,EAAkB,WAGtB,IAoBMC,EApBkB,CACtB,CACET,KAAM,UACNb,MAAO,EACPuB,IAAK,IAAIC,KACTC,UAAW,MAEb,CACEZ,KAAM,UACNb,MAAO,EACPuB,IAAK,IAAIC,KACTC,UAAW,MAEb,CACEZ,KAAM,UACNb,MAAO,EACPuB,IAAK,IAAIC,KACTC,UAAW,OAGaC,KAAI,SAAAC,GAC9B,OACE,cAAC,EAAD,CAAQ7B,MAAO6B,OAGnB,OACE,qBAAKtC,UAAW,mBAAhB,SACGiC,KCvLQM,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.9fc561ef.chunk.js","sourcesContent":["import React, { FC, useEffect, useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css'\n\nexport default function App() {\n  return (\n    <>\n      <Router>\n        <div>\n          <div className=\"navigator\">\n\n            <div>\n              <Link to=\"/calendar\">\n                <i className=\"fas fa-calendar\"></i>\n              </Link>\n            </div>\n            <div>\n              <Link to=\"/charts\">\n                <i className=\"fas fa-chart-bar\"></i>\n              </Link>\n            </div>\n            <div>\n              <Link to=\"/\">\n\n                <i className=\"fas fa-home\"></i>\n              </Link>\n            </div>\n            <div>\n              <Link to=\"/themes\">\n                <i className=\"fas fa-pen\"></i>\n              </Link>\n            </div>\n            <div>\n              <Link to=\"/settings\">\n                <i className=\"fas fa-sliders-h\"></i>\n              </Link>\n            </div>\n\n\n          </div >\n\n          {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n          <Switch>\n            <Route path=\"/calendar\">\n              <Calendar />\n            </Route>\n            <Route path=\"/charts\">\n              <Charts />\n            </Route>\n            <Route path=\"/themes\">\n              <Themes />\n            </Route>\n            <Route path=\"/settings\">\n              <Settings />\n            </Route>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n\n    </>\n  );\n}\n\n\nexport interface Grade {\n  name: string;\n  value: number;\n  day: Date;\n  shortName: string;\n}\n\nconst Home = () => {\n  return (\n    <>\n      <h2>Home</h2>\n      <Circles />\n    </>\n  )\n}\n\nconst Calendar = () => {\n  return (\n    <>\n      <h2>Calendar</h2>\n\n    </>\n  )\n}\n\nconst Charts = () => {\n  return (\n    <>\n      <h2>Users</h2>\n\n    </>\n  )\n}\n\nconst Themes = () => {\n  return (\n    <>\n      <h2>Themes</h2>\n\n    </>\n  )\n}\n\nconst Settings = () => {\n  return (\n    <>\n      <h2>Settings</h2>\n\n    </>\n  )\n}\n\n\n\n\n\nconst Circle: FC<{ score: Grade }> = ({ score }) => {\n  const radius = 4.5;\n\n\n  const [grade, setGrade] = useState(score.value);\n  const [circleDashArray, setCircleDashArray] = useState(\"85, 100\")\n  const [color, setColor] = useState(\"var(--stroke)\")\n  const clicked = () => {\n\n    setGrade((grade + 1) % 3)\n    const percentage = grade / 2\n    setColor(`var(--stroke)`)\n    if (percentage === 0) {\n      setColor(\"transparent\")\n    }\n\n    setCircleDashArray(`${percentage * (2 * radius * Math.PI)}, ${radius * 2 * Math.PI}`)\n  }\n\n  useEffect(() => {\n    clicked()\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [])\n  return (\n    <div className={\"themes_wrapper \" + score.name} >\n      <p>{score.name}</p>\n\n      <div className={\"ring_wrapper \" + score.name} onClick={clicked}>\n        <svg viewBox=\"0 0 10 10\">\n          <path className=\"outline\" d=\"M5 0.5 a 4.5 4.5 0 0 1 0 9 a 4.5 4.5 0 0 1 0 -9\" fill=\"none\" strokeDasharray=\"100, 100\" />\n          <path className=\"ring home_ring\" id={\"1\"} d=\"M5 0.5 a 4.5 4.5 0 0 1 0 9 a 4.5 4.5 0 0 1 0 -9\" fill=\"none\" strokeDasharray={circleDashArray} style={{ \"stroke\": `${color}` }} />\n        </svg>\n\n      </div>\n    </div>\n  )\n}\n\nconst Circles: FC<{}> = () => {\n\n\n  const themes: Grade[] = [\n    {\n      name: \"Theme 1\",\n      value: 1,\n      day: new Date(),\n      shortName: \"T1\"\n    },\n    {\n      name: \"Theme 2\",\n      value: 2,\n      day: new Date(),\n      shortName: \"T2\"\n    },\n    {\n      name: \"Theme 3\",\n      value: 0,\n      day: new Date(),\n      shortName: \"T3\"\n    },\n  ]\n  const circles_list = themes.map(theme => {\n    return (\n      <Circle score={theme} />\n    )\n  })\n  return (\n    <div className={\"themes_container\"}>\n      {circles_list}\n    </div>\n  )\n\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}